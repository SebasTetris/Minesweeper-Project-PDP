
import random 

def print_board(board):
    """
    Diese Funktion zeichnet das angegebene Board auf der Konsole.
    Args:
        board (list of list of str): 
        Das Spielbrett, eine 2D-Liste, die den aktuellen Zustand jedes Feldes enthÃ¤lt.
        Die Felder kÃ¶nnen eine Mine ('ðŸ’£'), eine Flagge ('ðŸš©'), eine Zahl (die angibt, die viele Minen sich in den angrenzenden Feldern befinden) oder ein Leerzeichen sein, 
        wenn das Feld noch nicht aufgedeckt wurde.
    """
    # Bestimme die GrÃ¶ÃŸe des Spielbretts anhand der LÃ¤nge der ersten Zeile. 
    # Dies setzt voraus, dass das Spielbrett quadratisch ist.
    n = len(board[0])

    # Kopfzeile des Spiels, gibt den Namen des Spiels in der Konsole aus.
    print("\n\t\t\tMINESWEEPER\n")

    # Initialisiere den String fÃ¼r die SpaltenkÃ¶pfe, beginnend mit einigen Leerzeichen fÃ¼r die Ausrichtung.
    col_header = '    '
    # Initialisiere die horizontale Linie, die unter den SpaltenkÃ¶pfen und zwischen den Reihen des Bretts gezeichnet wird.
    hline = '   |'

    # Erstelle die Kopfzeile der Spalten und die horizontale Linie durch Iteration Ã¼ber die Anzahl der Spalten.
    for c in range(n):
        # FÃ¼ge der Kopfzeile die Spaltennummer hinzu, zentriert in einem 4 Zeichen breiten Feld.
        col_header += f" {c:^4} "
        # FÃ¼ge der horizontalen Linie eine Trennung hinzu.
        hline += '-----|'

    # Drucke die Kopfzeile der Spalten.
    print(col_header)

    # FÃ¼r jede Reihe im Spielbrett:
    for r in range(n):
        # Drucke die horizontale Linie oberhalb der Reihe.
        print(hline)
        
        # Initialisiere einen leeren String fÃ¼r die aktuelle Reihe.
        row = ''
        # Iteriere Ã¼ber jede Zelle in der Reihe.
        for c in range(n):
            # Wenn die Zelle eine Mine oder eine Flagge enthÃ¤lt, zentriere das Symbol in einem 4 Zeichen breiten Feld.
            # Dies ist notwendig, da Emojis in der Konsole manchmal als zwei Zeichen breit angesehen werden und das Alignment sonst verloren gehen kÃ¶nnte.
            if board[r][c] == 'ðŸ’£' or board[r][c] == 'ðŸš©':
                row += f"{board[r][c]:^4}|"
            # FÃ¼r alle anderen Zellen (Zahlen oder Leerzeichen) verwende ein 5 Zeichen breites Feld zur Zentrierung.
            else:
                row += f"{board[r][c]:^5}|"

        # Drucke die aktuelle Reihe mit der Reihennummer am Anfang.
        print(f" {r} |{row}")

    # Drucke die horizontale Linie unterhalb der letzten Reihe.
    print(hline)




def print_instructions():
    """
    Gibt die Anweisungen auf der Konsole aus.
    """
    print("Anweisungen:")
    print("1. Gib die Reihe und die Spalte an, z.B. '2 3'")
    print("2. Um eine Flage zu setzten, gib noch ein 'F' ein, z.B. '2 3 F'")




def check_victory(b, real_values, displayed_values):
    """
    Diese Funktion checkt, ob man gewonnen hat, indem alle Felder ohne Bomben aufgedeckt wurden oder diese keine Bombe als Nachbar haben.

    Args:
        b (int): 
        Die Gesamtanzahl der Bomben auf dem Spielbrett.
        
        real_values (list of list of int/str): 
        Eine 2D-Liste, die die tatsÃ¤chlichen Werte der Zellen enthÃ¤lt. 
        Dies kann eine Zahl (die Anzahl der angrenzenden Minen), eine Mine ('ðŸ’£') oder 
        ein leeres Feld sein, wenn es keine angrenzenden Minen gibt.
        
        displayed_values (list of list of str): 
        Eine 2D-Liste, die darstellt, welche Zellen dem Spieler bereits angezeigt wurden. 
        Dies kann eine aufgedeckte Zahl, eine Flagge ('ðŸš©') oder ein leeres Feld sein.

    Returns:
        bool: Gibt True zurÃ¼ck, wenn der Spieler gewonnen hat, andernfalls False.
    """
    # Bestimme die GrÃ¶ÃŸe des Spielbretts anhand der LÃ¤nge der ersten Zeile der real_values.
    n = len(real_values[0])

    # Initialisiere einen ZÃ¤hler fÃ¼r die Anzahl der korrekt aufgedeckten Felder.
    count = 0

    # Durchlaufe jede Zelle des Spielbretts.
    for r in range(n):
        for c in range(n):
            # ZÃ¤hlt, ob eine Nicht-Mine korrekt aufgedeckt wurde
            if displayed_values[r][c] != ' ' and displayed_values[r][c] != 'ðŸš©':
                count += 1

        # ÃœberprÃ¼ft, ob alle Nicht-Minen aufgedeckt wurden
    if count == n * n - b:
        return True
    else:
        return False


def generate_board_with_bombs(n, b):
    """
    Diese Funktion initialisiert ein Board mit n Zeilen und Spalten und b Bomben.
    Args:
        n (int): Die GrÃ¶ÃŸe des Spielbretts (Anzahl der Zeilen und Spalten). Das Brett ist quadratisch.
        b (int): Die Anzahl der Bomben, die auf dem Brett platziert werden sollen.

    Returns:
        board (list of list of str): Das initialisierte Spielbrett als 2D-Liste.
    """
    # Erstelle eine flache Liste aller Zellen des Spielbretts. 
    # Anfangs sind alle Zellen leer (reprÃ¤sentiert durch 0).
    cells = [0 for i in range(n*n)]

    # Platziere die Bomben an den Anfang der Liste. 
    # Die ersten 'b' Positionen in der Liste werden mit 'ðŸ’£' markiert, um Bomben darzustellen.
    for i in range(b):
        cells[i] = 'ðŸ’£'

    # Mische die Liste, um die Bomben zufÃ¤llig auf dem Spielbrett zu verteilen.
    random.shuffle(cells)

    # Initialisiere das 2D-Spielbrett mit leeren Feldern (' ').
    # Dies schafft die Struktur des Spielbretts, in die wir die gemischten Zellen einfÃ¼gen werden.
    board = [[' ' for i in range(n)] for j in range(n)]

    # FÃ¼lle das 2D-Spielbrett mit den Werten aus der gemischten Liste.
    # Die Umwandlung von der flachen Liste in ein 2D-Array ermÃ¶glicht die Darstellung des Spielbretts in Minesweeper.
    for i in range(n):
        for j in range(n):
            # Die Zuweisung erfolgt basierend auf der umgerechneten Indexposition.
            # 'i + j*n' berechnet den entsprechenden Index in der flachen Liste fÃ¼r die Position (i, j) im 2D-Array.
            board[i][j] = cells[i + j*n]

    # RÃ¼ckgabe des initialisierten Spielbretts.
    return board
    # Ein Beispiel fÃ¼r die Umwandlung einer flachen Liste in ein 2D-Array ist im Kommentar unten gezeigt:
    # [0, 1, 2, 3, 4, 5, 6, 7, 8] wird zu [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
    # wobei jeder Index in der flachen Liste seiner Position im 2D-Array entspricht.
    '''
    [0, 1, 2, 3, 4, 5, 6, 7, 8]
    ==>
      0  1  2    i/j
    -------------|
    [[0, 1, 2],  | 0   
     [3, 4, 5],  | 1
     [6, 7, 8]]  | 2

    Index 0 in 0,0
    Index 3 in 1,0  
    Index 5 in 1,2
    Index 8 in 2,2

    '''

def generate_values(board):
    """
    Generiert Werte fÃ¼r ein gegebenes Spielfeld, basierend auf der Position von Bomben.

    Die Funktion durchlÃ¤uft jede Zelle des Spielfelds und erhÃ¶ht den Wert der Zelle um 1 fÃ¼r jede benachbarte Bombe.
    Die Funktion Ã¼berspringt Zellen, die eine Bombe enthalten.

    Args:
        board (list of list of str/int): 
        Das Spielbrett, auf dem die Werte generiert werden sollen.
        Bomben sind als 'ðŸ’£' gekennzeichnet, leere Felder zunÃ¤chst mit 0.

    Returns:
        list of list of int: 
        Das aktualisierte Spielbrett mit den generierten Werten fÃ¼r jede Zelle.
    """  

    # Bestimme die GrÃ¶ÃŸe des Spielbretts (angenommen, es ist quadratisch).
    n = len(board[0])

    # Durchlaufe jede Zelle des Spielbretts, um die Anzahl der angrenzenden Minen zu berechnen.
    for row in range(n):
        for col in range(n):
 
            # Ãœberspringe die Berechnung fÃ¼r Zellen, die eine Bombe enthalten.
            if board[row][col] == 'ðŸ’£':
                continue
                    
            # ÃœberprÃ¼fe die Zelle direkt oberhalb.
            if row > 0 and board[row-1][col] == 'ðŸ’£':
                board[row][col] += 1

            # ÃœberprÃ¼fe die Zelle oben links.
            if row > 0 and col > 0 and board[row-1][col-1] == 'ðŸ’£':
                board[row][col] += 1

            # ÃœberprÃ¼fe die Zelle oben rechts.
            if row > 0 and col < n-1 and board[row-1][col+1] == 'ðŸ’£':
                board[row][col] += 1

            # ÃœberprÃ¼fe die Zelle direkt unterhalb.
            if row < n-1  and board[row+1][col] == 'ðŸ’£':
                board[row][col] += 1

            # ÃœberprÃ¼fe die Zelle unten links.
            if row < n-1 and col > 0 and board[row+1][col-1] == 'ðŸ’£':
                board[row][col] += 1

            # ÃœberprÃ¼fe die Zelle unten rechts.
            if row < n-1 and col < n-1 and board[row+1][col+1] == 'ðŸ’£':
                board[row][col] += 1

            # ÃœberprÃ¼fe die Zelle direkt links.
            if col > 0 and board[row][col-1] == 'ðŸ’£':
                board[row][col] += 1

            # ÃœberprÃ¼fe die Zelle direkt rechts.
            if col < n-1 and board[row][col+1] == 'ðŸ’£':
                board[row][col] += 1

    # Gebe das aktualisierte Spielbrett mit den berechneten Werten zurÃ¼ck.
    return board

def start():
    """
    Startet das Spiel "Minesweeper".
    Diese Funktion initialisiert das Spielfeld, platziert Bomben zufÃ¤llig und berechnet die Werte fÃ¼r jede Zelle basierend auf der Anzahl der benachbarten Bomben.
    AnschlieÃŸend fÃ¼hrt sie den Spielzyklus aus, in dem der Spieler Eingaben macht, um Zellen zu enthÃ¼llen oder Flaggen zu platzieren.
    Das Spiel endet, wenn der Spieler auf eine Bombe trifft oder alle sicheren Zellen enthÃ¼llt hat.
    """
 # Initialisiere die SpielgrÃ¶ÃŸe und die Anzahl der Bomben.
    n = 6       # Definiert die GrÃ¶ÃŸe des Spielbretts als 6x6 Felder.
    b = 8   # Legt fest, dass 8 Bomben zufÃ¤llig auf dem Spielbrett platziert werden.
    flags = []  # Eine leere Liste, um die Positionen der gesetzten Flaggen zu speichern.

    # Initialisiere die Listen, die die Werte auf dem Spielbrett speichern.
    real_values = []  
    # Diese Liste wird spÃ¤ter mit den echten Werten (Bomben und Zahlen) gefÃ¼llt.
    displayed_values = [[' ' for y in range(n)] for x in range(n)]  
    # Zeigt anfÃ¤nglich leere Felder an.

    # Initialisiere das Spielbrett mit Bomben und berechne die Werte fÃ¼r jede Zelle.
    real_values = generate_board_with_bombs(n, b)  # Platziere Bomben zufÃ¤llig auf dem Brett.
    real_values = generate_values(real_values)  # Berechne die Zahlen fÃ¼r jede Zelle basierend auf den benachbarten Bomben.

    print_board(real_values)  
    # Zeige das Spielbrett im Testmodus an, um die Platzierung der Bomben zu sehen.

    print_instructions()  
    # Zeige die Anweisungen fÃ¼r den Spieler an.

    # Spiel-Hauptschleife beginnt hier.
    game_over = False  
    # Eine Variable, um den Spielstatus zu Ã¼berwachen.
    while not game_over:
        print_board(displayed_values)  # Zeichne das Spielbrett fÃ¼r den Spieler bei jedem Durchlauf neu.

        try: 
            # Fordere Spielerinput an und Ã¼berprÃ¼fe die GÃ¼ltigkeit der Eingabe.
            inp = input("\nGib die Reihe und die Spalte an: ").split()
            r, c = int(inp[0]), int(inp[1])  # Konvertiere Eingaben in Integer.
            
            # ÃœberprÃ¼fe, ob die eingegebenen Koordinaten innerhalb des gÃ¼ltigen Bereichs liegen.
            assert r >= 0 and r < n and c >= 0 and c < n
            # Stelle sicher, dass das gewÃ¤hlte Feld entweder leer oder mit einer Flagge markiert ist.
            assert displayed_values[r][c] == ' ' or displayed_values[r][c] == 'ðŸš©'
            
            # Behandle das Setzen oder Entfernen von Flaggen basierend auf der Eingabe.
            # FLAGS
            if len(inp) == 3:

                # Eingegebener Buchstabe ist ein 'F' und die Flage existiert noch nicht
                assert inp[2].lower() == 'f' 
        except Exception:
            print("Falscher Input! Versuche es nochmal!\n")
            print_instructions()
            continue
        

        # Wenn wir uns im Flag Mode bedinden, dann Flage hinzufÃ¼gen oder entfernen.
        if len(inp) == 3:
            
            if (r,c) not in flags:
                # Eine neue Flage setzen (als Tupel von Row und Column)
                flags.append((r,c))
                    
                # Die Flage auf dem Board zeigen
                displayed_values[r][c] = 'ðŸš©'

                print(f'Flag {(r,c)} hinzugefÃ¼gt!')

            # Sollte die ausgewÃ¤hlte Position eine vordefiniert Flage sein, dann entferne die Flage
            else:
                # Die Flage entfernen (als Tupel)
                flags.remove((r,c))                

                # Die Flage aus dem Board entfernen
                displayed_values[r][c] = ' '

                print(f'Flag {(r,c)} wurde entfernt!')
    
        # Sollte die ausgewÃ¤hlte Position eine Bombe sein, dann GAME OVER
        elif real_values[r][c] == 'ðŸ’£':

            # Zeige die Bombe auf der Konsole
            displayed_values[r][c] = 'ðŸ’£'

            print_board(displayed_values)

            print("GAME OVER!!!")

            game_over = True

        # Sollte die ausgewÃ¤hlte Position KEINE Bombe sein, dann zeige den echten Wert der Zelle
        else:
            displayed_values[r][c] = real_values[r][c]

        # Sollten alle Felder endetckt sein, dann GEWONNEN
        if check_victory(b, real_values, displayed_values):

            print_board(displayed_values)

            print("Du hast gewonnen!!!")

            game_over = True

start()


